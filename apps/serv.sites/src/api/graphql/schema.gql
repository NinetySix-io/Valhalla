# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type PageElementPlatformSchema {
  """Date entity was created"""
  createdAt: DateTime!

  """Date entity was updated"""
  updatedAt: DateTime!

  """Identifier of the entity"""
  id: ID!

  """X position"""
  x: Float!

  """Y position"""
  y: Float!

  """Height"""
  height: Float!

  """Width"""
  width: Float!

  """Whether this element is visible"""
  isVisible: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PageSectionFormatSchema {
  """Row count"""
  rowsCount: Float!

  """Column gap"""
  columnGap: Float!

  """Row Gap"""
  rowGap: Float!

  """Account ID of updater"""
  updatedBy: String!
}

type PageSectionSchema {
  """Date entity was created"""
  createdAt: DateTime!

  """Date entity was updated"""
  updatedAt: DateTime!

  """Identifier of the entity"""
  id: ID!

  """Section format configuration"""
  format: PageSectionFormatSchema!
  updatedBy: String!
}

type PageSchema {
  """Date entity was created"""
  createdAt: DateTime!

  """Date entity was updated"""
  updatedAt: DateTime!

  """Identifier of the entity"""
  id: ID!

  """Page url"""
  slug: String

  """Edit status"""
  status: EditStatus!

  """Page title"""
  title: String!

  """Whether the title should be independent or part of the title template"""
  isLoneTitle: Boolean

  """Page description"""
  description: String

  """Account ID of updater"""
  updatedBy: String!

  """Sections"""
  sections: [PageSectionSchema!]!
}

enum EditStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

type SiteSchema {
  """Date entity was created"""
  createdAt: DateTime!

  """Date entity was updated"""
  updatedAt: DateTime!

  """Identifier of the entity"""
  id: ID!

  """Site name"""
  name: String!

  """Site status"""
  status: SiteStatus!

  """Site url"""
  url: String

  """Account ID of creator"""
  createdBy: String!

  """Account ID of last updater"""
  updatedBy: String!

  """Site owner"""
  ownBy: String!
}

enum SiteStatus {
  DEPLOYED
  PENDING
  SUSPENDED
}

type PageElementTextSchema {
  """Date entity was created"""
  createdAt: DateTime!

  """Date entity was updated"""
  updatedAt: DateTime!

  """Identifier of the entity"""
  id: ID!

  """Element type"""
  type: PrimitiveElementType!

  """Desktop configuration"""
  desktop: PageElementPlatformSchema!

  """Tablet configuration"""
  tablet: PageElementPlatformSchema

  """Mobile configuration"""
  mobile: PageElementPlatformSchema

  """User ID"""
  updatedBy: String!

  """User ID"""
  createdBy: String!
  json: JSON
  html: String
}

enum PrimitiveElementType {
  TEXT
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type PageUpdatedResponse {
  """Identifier of the entity"""
  id: ID!

  """Edit status"""
  status: EditStatus!
}

type SiteUpdatedResponse {
  """Identifier of the entity"""
  id: ID!

  """Site name"""
  name: String!

  """Site status"""
  status: SiteStatus!

  """Site url"""
  url: String
}

type Query {
  siteList: [SiteSchema!]!
  site(id: String!): SiteSchema!
  pageList(siteId: String!): [PageSchema!]!
  page(id: String!): PageSchema!
  sectionList(pageId: String!): [PageSectionSchema!]!
  section(sectionId: String!): PageSectionSchema!
  pageElementListByGroup(groupId: String!): [ElementUnion!]!
}

union ElementUnion = PageElementTextSchema

type Mutation {
  createSite(input: CreateSiteInput!): SiteUpdatedResponse!
  updateSite(input: UpdateSiteInput!, id: String!): SiteUpdatedResponse!
  createPage(siteId: String!, input: CreatePageInput!): PageUpdatedResponse!
  deletePage(id: String!): PageUpdatedResponse!
  updatePage(id: String!, input: UpdatePageInput!): PageUpdatedResponse!
  createSection(pageId: String!, input: CreateSectionInput!): PageSectionSchema!
  updateSectionFormat(pageId: String!, sectionId: String!, input: UpdateSectionFormatInput!): PageSectionSchema!
  updateSectionIndex(pageId: String!, sectionId: String!, index: Float!): PageSectionSchema!
  deleteSection(pageId: String!, sectionId: String!): PageSectionSchema!
  cloneSection(pageId: String!, sectionId: String!): PageSectionSchema!

  """Add text element"""
  addTextElement(groupId: String!, input: AddTextElementInput!): PageElementTextSchema!

  """Update text element"""
  updateTextElement(elementId: String!, input: UpdateTextElementInput!): PageElementTextSchema!
  deleteManyElements(elementIdList: [String!]!): [ElementUnion!]!
}

input CreateSiteInput {
  """Site name"""
  name: String!
}

input UpdateSiteInput {
  """Site name"""
  name: String
}

input CreatePageInput {
  """Page title"""
  title: String!
}

input UpdatePageInput {
  """Page title"""
  title: String

  """Whether the title should be independent or part of the title template"""
  isLoneTitle: Boolean

  """Page description"""
  description: String
}

input CreateSectionInput {
  """Position"""
  index: Float
}

input UpdateSectionFormatInput {
  """Row count"""
  rowsCount: Float

  """Column gap"""
  columnGap: Float

  """Row Gap"""
  rowGap: Float
}

input AddTextElementInput {
  json: JSON
  html: String
  desktop: PlatformPositionInput!
  tablet: PlatformPositionInput
  mobile: PlatformPositionInput
}

input PlatformPositionInput {
  """X position"""
  x: Float!

  """Y position"""
  y: Float!

  """Height"""
  height: Float!

  """Width"""
  width: Float!

  """Whether this element is visible"""
  isVisible: Boolean!
}

input UpdateTextElementInput {
  json: JSON
  html: String
  desktop: PlatformPositionInput
  tablet: PlatformPositionInput
  mobile: PlatformPositionInput
}

scalar link__Import