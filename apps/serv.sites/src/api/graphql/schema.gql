# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type ElementArea {
  x: NonNegativeInt!
  y: NonNegativeInt!
  height: NonNegativeInt!
  width: NonNegativeInt!
  isVisible: NonNegativeInt!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type ElementText {
  id: ObjectID!
  type: ElementType!
  updatedBy: ObjectID!
  createdBy: ObjectID!
  group: ObjectID!
  desktop: ElementArea!
  tablet: ElementArea
  mobile: ElementArea
  createdAt: DateTime
  updatedAt: DateTime
  html: String
  json: JSONObject
}

"""
A field whose value conforms with the standard mongodb object ID as described here: https://docs.mongodb.com/manual/reference/method/ObjectId/#ObjectId. Example: 5e5677d71bdc2ae76344968c
"""
scalar ObjectID

enum ElementType {
  TEXT
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Page {
  id: ObjectID!
  title: String!
  description: String
  site: ObjectID!
  status: String!
  isLoneTitle: Boolean
  createdBy: ObjectID!
  updatedBy: ObjectID!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
}

type PageUpdatedResponse {
  id: ObjectID!
  status: String!
}

type PageSectionFormat {
  rowsCount: NonNegativeInt!
  rowGap: NonNegativeInt!
  columnGap: NonNegativeInt!
}

type PageSection {
  id: ObjectID!
  format: PageSectionFormat!
  updatedBy: ObjectID!
  createdBy: ObjectID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Site {
  id: ObjectID!
  name: String!
  createdBy: ObjectID!
  updatedBy: ObjectID!
  status: SiteStatus!
  url: URL!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum SiteStatus {
  DEPLOYED
  PENDING
  SUSPENDED
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type SiteUpdatedResponse {
  id: ObjectID!
  name: String!
  status: SiteStatus!
  url: URL!
}

type Query {
  siteByOwner: [Site!]!
  site(siteId: ObjectID!): Site!
  pagesBySite(siteId: ObjectID!): [Page!]!
  page(pageId: ObjectID!): Page!
  sectionsByPage(pageId: ObjectID!): [PageSection!]!
  section(sectionId: ObjectID!): PageSection!
  elementsByGroup(groupId: ObjectID!): [ElementUnion!]!
}

union ElementUnion = ElementText

type Mutation {
  createSite(input: CreateSiteInput!): SiteUpdatedResponse!
  updateSite(siteId: ObjectID!, input: UpdateSiteInput!): SiteUpdatedResponse!
  createPage(siteId: ObjectID!, input: CreatePageInput!): PageUpdatedResponse!
  deletePage(pageId: ObjectID!): PageUpdatedResponse!
  updatePage(pageId: ObjectID!, input: UpdatePageInput!): PageUpdatedResponse!
  createSection(pageId: ObjectID!, input: CreateSectionInput): PageSection!
  updateSectionFormat(sectionId: ObjectID!, pageId: ObjectID!, input: UpdateSectionFormatInput!): PageSection!
  updateSectionIndex(sectionId: ObjectID!, pageId: ObjectID!, index: NonNegativeInt!): PageSection!
  deleteSection(sectionId: ObjectID!, pageId: ObjectID!): PageSection!
  cloneSection(sectionId: ObjectID!, pageId: ObjectID!): PageSection!

  """Add text element"""
  addTextElement(groupId: ObjectID!, input: AddTextElementInput!): ElementText!

  """Update text element"""
  updateTextElement(elementId: ObjectID!, input: UpdateTextElementInput!): ElementText!
  deleteManyElements(elementIds: [ObjectID!]!): [ElementUnion!]!
}

input CreateSiteInput {
  name: String!
}

input UpdateSiteInput {
  name: String
}

input CreatePageInput {
  title: String!
}

input UpdatePageInput {
  title: String
  description: String
  isLoneTitle: Boolean
}

input CreateSectionInput {
  """Position"""
  index: NonNegativeInt
}

input UpdateSectionFormatInput {
  rowsCount: NonNegativeInt
  rowGap: NonNegativeInt
  columnGap: NonNegativeInt
}

input AddTextElementInput {
  desktop: ElementAreaInput
  tablet: ElementAreaInput
  mobile: ElementAreaInput
  html: String
  json: JSONObject
}

input ElementAreaInput {
  x: NonNegativeInt!
  y: NonNegativeInt!
  height: NonNegativeInt!
  width: NonNegativeInt!
  isVisible: NonNegativeInt!
}

input UpdateTextElementInput {
  desktop: ElementAreaInput
  tablet: ElementAreaInput
  mobile: ElementAreaInput
  html: String
  json: JSONObject
}

scalar link__Import