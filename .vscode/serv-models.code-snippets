{
  "Model": {
    "prefix": "model",
    "description": "Data model constructor",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "import { InjectModel } from 'nestjs-typegoose';",
      "import { BaseFactory, ModelType } from '@valhalla/serv.core';",
      "import { $1Schema } from './schema';",
      "",
      "@Injectable()",
      "export class $1sModel extends BaseFactory<$1Schema> {",
      "\tconstructor(",
      "\t\t@InjectModel($1Schema)",
      "\t\tmodel: ModelType<$1Schema>,",
      "\t) {",
      "\t\tsuper(model);",
      "\t}",
      "}"
    ]
  },
  "Schema": {
    "prefix": "schema",
    "body": [
      "import { typegoose } from '@valhalla/serv.core';",
      "import { SimpleModel, BaseSchema } from '@valhalla/serv.core';",
      "",
      "@SimpleModel('$1')",
      "export class $2Schema extends BaseSchema {",
      "\t$3",
      "}"
    ]
  },
  "Transformer": {
    "prefix": "transformer",
    "description": "Entity transformer",
    "body": [
      "import { typegoose } from '@valhalla/serv.core';",
      "import { $1Schema } from './schema';",
      "import { $1 as Proto } from '@app/protobuf';",
      "",
      "export class $1Transformer extends $1Schema {",
      "",
      "\tconstructor(entity: typegoose.DocumentType<$1Schema> | $1Schema) {",
      "\t\tsuper()",
      "\t\tObject.assign(this, typegoose.isDocument(entity) ? entity.toObject({ virtuals: false }) : entity)",
      "\t}",
      "",
      "\tget proto(): Proto {",
      "\t\treturn {",
      "\t\t\t$2",
      "\t\t};",
      "\t}",
      "}",
      ""
    ]
  }
}
