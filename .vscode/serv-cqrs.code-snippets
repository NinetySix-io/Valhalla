{
  "Query Impl": {
    "prefix": "cQuery",
    "description": "CQRS Query",
    "body": [
      "import { IQuery, IQueryHandler, QueryHandler } from '@nestjs/cqrs';",
      "import { LoggerService } from '@nestjs/common';",
      "import { $1Response, $1Request } from '$2';",
      "",
      "export class $1Query implements IQuery {",
      "\tconstructor(public readonly request: $1Request) {}",
      "}",
      "",
      "@QueryHandler($1Query)",
      "export class $1Handler",
      "\timplements IQueryHandler<$1Query,$1Response>",
      "{",
      "\tconstructor(",
      "\t\tprivate readonly logger: LoggerService",
      "\t) {}",
      "",
      "\tasync execute(",
      "\t\tcommand: $1Query,",
      "\t): Promise<$1Response> {",
      "\t\tthis.logger.debug(command);",
      "\t\tthrow new Error('Not implemented');",
      "\t}",
      "}",
      ""
    ]
  },
  "Command Impl": {
    "prefix": "cCommand",
    "description": "CQRS Command",
    "body": [
      "import {",
      "\tCommandHandler,",
      "\tEventBus,",
      "\tICommand,",
      "\tICommandHandler,",
      "} from '@nestjs/cqrs';",
      "import {",
      "\t$1Request,",
      "\t$1Response,",
      "} from '@serv.$2/protobuf/$2';",
      "",
      "import { LoggerService } from '@nestjs/common';",
      "import { RpcHandler } from '@valhalla/serv.core';",
      "",
      "export class $1Command implements ICommand {",
      "\tconstructor(public readonly input: $1Request) {}",
      "}",
      "",
      "@CommandHandler($1Command)",
      "@RpcHandler()",
      "export class $1Handler",
      "\timplements ICommandHandler<$1Command, $1Response>",
      "{",
      "\tconstructor(",
      "\t\tprivate readonly eventBus: EventBus,",
      "\t\tprivate readonly logger: LoggerService,",
      "\t) {}",
      "",
      "\tasync execute(",
      "\t\tcommand: $1Command,",
      "\t): Promise<$1Response> {",
      "\t\tthis.logger.debug(command.input);",
      "\t\tthrow new Error('Not implemented');",
      "\t}",
      "}",
      ""
    ]
  }
}
